// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payments.sql

package sqlc

import (
	"context"
)

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, user_id, permit_id, amount, status, payment_method, created_at, updated_at FROM payments WHERE id = $1
`

func (q *Queries) GetPayment(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PermitID,
		&i.Amount,
		&i.Status,
		&i.PaymentMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPayments = `-- name: GetPayments :many
SELECT id, user_id, permit_id, amount, status, payment_method, created_at, updated_at FROM payments
`

func (q *Queries) GetPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PermitID,
			&i.Amount,
			&i.Status,
			&i.PaymentMethod,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newPayment = `-- name: NewPayment :one
INSERT INTO payments (user_id, permit_id, amount, status, payment_method) VALUES ($1, $2, $3, $4, $5) RETURNING id, user_id, permit_id, amount, status, payment_method, created_at, updated_at
`

type NewPaymentParams struct {
	UserID        int32  `json:"user_id"`
	PermitID      int32  `json:"permit_id"`
	Amount        string `json:"amount"`
	Status        string `json:"status"`
	PaymentMethod string `json:"payment_method"`
}

func (q *Queries) NewPayment(ctx context.Context, arg NewPaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, newPayment,
		arg.UserID,
		arg.PermitID,
		arg.Amount,
		arg.Status,
		arg.PaymentMethod,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PermitID,
		&i.Amount,
		&i.Status,
		&i.PaymentMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments SET amount = $1, status = $2, payment_method = $3 WHERE id = $4 RETURNING id, user_id, permit_id, amount, status, payment_method, created_at, updated_at
`

type UpdatePaymentParams struct {
	Amount        string `json:"amount"`
	Status        string `json:"status"`
	PaymentMethod string `json:"payment_method"`
	ID            int32  `json:"id"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePayment,
		arg.Amount,
		arg.Status,
		arg.PaymentMethod,
		arg.ID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PermitID,
		&i.Amount,
		&i.Status,
		&i.PaymentMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
