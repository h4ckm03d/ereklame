// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notifications.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const getNotification = `-- name: GetNotification :one
SELECT id, user_id, message, status, created_at FROM notifications WHERE id = $1
`

func (q *Queries) GetNotification(ctx context.Context, id int32) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getNotifications = `-- name: GetNotifications :many
SELECT id, user_id, message, status, created_at FROM notifications
`

func (q *Queries) GetNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newNotification = `-- name: NewNotification :one
INSERT INTO notifications (user_id, message, status) VALUES ($1, $2, $3) RETURNING id, user_id, message, status, created_at
`

type NewNotificationParams struct {
	UserID  int32          `json:"user_id"`
	Message string         `json:"message"`
	Status  sql.NullString `json:"status"`
}

func (q *Queries) NewNotification(ctx context.Context, arg NewNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, newNotification, arg.UserID, arg.Message, arg.Status)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateNotification = `-- name: UpdateNotification :one
UPDATE notifications SET message = $1, status = $2 WHERE id = $3 RETURNING id, user_id, message, status, created_at
`

type UpdateNotificationParams struct {
	Message string         `json:"message"`
	Status  sql.NullString `json:"status"`
	ID      int32          `json:"id"`
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, updateNotification, arg.Message, arg.Status, arg.ID)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
