// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permits.sql

package sqlc

import (
	"context"
)

const deletePermit = `-- name: DeletePermit :exec
DELETE FROM permits WHERE id = $1
`

func (q *Queries) DeletePermit(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePermit, id)
	return err
}

const getPermit = `-- name: GetPermit :one
SELECT id, user_id, description, status, created_at, updated_at FROM permits WHERE id = $1
`

func (q *Queries) GetPermit(ctx context.Context, id int32) (Permit, error) {
	row := q.db.QueryRowContext(ctx, getPermit, id)
	var i Permit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPermits = `-- name: GetPermits :many
SELECT id, user_id, description, status, created_at, updated_at FROM permits
`

func (q *Queries) GetPermits(ctx context.Context) ([]Permit, error) {
	rows, err := q.db.QueryContext(ctx, getPermits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permit
	for rows.Next() {
		var i Permit
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newPermit = `-- name: NewPermit :one
INSERT INTO permits (user_id, description, status) VALUES ($1, $2, $3) RETURNING id, user_id, description, status, created_at, updated_at
`

type NewPermitParams struct {
	UserID      int32  `json:"user_id"`
	Description string `json:"description"`
	Status      string `json:"status"`
}

func (q *Queries) NewPermit(ctx context.Context, arg NewPermitParams) (Permit, error) {
	row := q.db.QueryRowContext(ctx, newPermit, arg.UserID, arg.Description, arg.Status)
	var i Permit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePermit = `-- name: UpdatePermit :one
UPDATE permits SET description = $1, status = $2 WHERE id = $3 RETURNING id, user_id, description, status, created_at, updated_at
`

type UpdatePermitParams struct {
	Description string `json:"description"`
	Status      string `json:"status"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdatePermit(ctx context.Context, arg UpdatePermitParams) (Permit, error) {
	row := q.db.QueryRowContext(ctx, updatePermit, arg.Description, arg.Status, arg.ID)
	var i Permit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
