// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: fee.sql

package sqlc

import (
	"context"
)

const deleteFee = `-- name: DeleteFee :exec
DELETE FROM fees WHERE id = $1
`

func (q *Queries) DeleteFee(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFee, id)
	return err
}

const getFee = `-- name: GetFee :one
SELECT id, permit_id, amount, created_at FROM fees WHERE id = $1
`

func (q *Queries) GetFee(ctx context.Context, id int32) (Fee, error) {
	row := q.db.QueryRowContext(ctx, getFee, id)
	var i Fee
	err := row.Scan(
		&i.ID,
		&i.PermitID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getFees = `-- name: GetFees :many
SELECT id, permit_id, amount, created_at FROM fees
`

func (q *Queries) GetFees(ctx context.Context) ([]Fee, error) {
	rows, err := q.db.QueryContext(ctx, getFees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fee
	for rows.Next() {
		var i Fee
		if err := rows.Scan(
			&i.ID,
			&i.PermitID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newFee = `-- name: NewFee :one
INSERT INTO fees (permit_id, amount) VALUES ($1, $2) RETURNING id, permit_id, amount, created_at
`

type NewFeeParams struct {
	PermitID int32  `json:"permit_id"`
	Amount   string `json:"amount"`
}

func (q *Queries) NewFee(ctx context.Context, arg NewFeeParams) (Fee, error) {
	row := q.db.QueryRowContext(ctx, newFee, arg.PermitID, arg.Amount)
	var i Fee
	err := row.Scan(
		&i.ID,
		&i.PermitID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const updateFee = `-- name: UpdateFee :one
UPDATE fees SET amount = $1 WHERE id = $2 RETURNING id, permit_id, amount, created_at
`

type UpdateFeeParams struct {
	Amount string `json:"amount"`
	ID     int32  `json:"id"`
}

func (q *Queries) UpdateFee(ctx context.Context, arg UpdateFeeParams) (Fee, error) {
	row := q.db.QueryRowContext(ctx, updateFee, arg.Amount, arg.ID)
	var i Fee
	err := row.Scan(
		&i.ID,
		&i.PermitID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
